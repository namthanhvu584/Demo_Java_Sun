// üìÅ Slide6 - T·ªïng h·ª£p b√†i t·∫≠p √°p d·ª•ng cho: Collection, Generics, PECS, Lambda, Predicate

package JavaCore_Sun.Slide6;

import java.util.*;
import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {

        // So s√°nh Array vs Collection
        int[] mangSo = {1, 2, 3}; // C·ªë ƒë·ªãnh 3 ph·∫ßn t·ª≠
        List<Integer> danhSachSo = new ArrayList<>(); // Co gi√£n ƒë·ªông
        danhSachSo.add(1);
        danhSachSo.add(2);
        danhSachSo.add(3);

        //Duy·ªát m·∫£ng
        for (int so : mangSo) {
            System.out.println("[Array] So = " + so);
        }

        //Duy·ªát List
        for (int so : danhSachSo) {
            System.out.println("[List] So = " + so);
        }

        //  C√°c method c∆° b·∫£n trong Collection
        danhSachSo.remove(Integer.valueOf(2)); // X√≥a ph·∫ßn t·ª≠ 2
        System.out.println("Sau khi x√≥a 2: " + danhSachSo);
        System.out.println("C√≥ ch·ª©a 3 kh√¥ng? " + danhSachSo.contains(3));

        //  Generics: d√πng class t·ªïng qu√°t
        Box<String> hopChu = new Box<>();
        hopChu.setGiaTri("Xin chao");
        System.out.println("H·ªôp ch·ª©a: " + hopChu.getGiaTri());

        Box<Integer> hopSo = new Box<>();
        hopSo.setGiaTri(100);
        System.out.println("H·ªôp ch·ª©a s·ªë: " + hopSo.getGiaTri());

        //  PECS: Producer extends, Consumer super
        List<? extends Number> danhSachDoc = List.of(1, 2, 3); // Ch·ªâ ƒë·ªçc
        // danhSachDoc.add(4); // ‚ùå Kh√¥ng cho ph√©p th√™m

        List<? super Integer> danhSachGhi = new ArrayList<>();
        danhSachGhi.add(10); // ‚úÖ Cho ph√©p ghi Integer ho·∫∑c con c·ªßa n√≥
        danhSachGhi.add(20);
        System.out.println("Danh s√°ch Ghi: " + danhSachGhi);

        //  Raw type - KH√îNG N√äN D√ôNG
        List rawList = new ArrayList();
        rawList.add("hello");
        rawList.add(123); // Kh√¥ng an to√†n, d·ªÖ l·ªói
        System.out.println("Raw List: " + rawList);

        //  D·ªØ li·ªáu nguy√™n th·ªßy v√† wrapper
        int a = 5;                    // Ki·ªÉu nguy√™n th·ªßy
        Integer b = Integer.valueOf(a); // Wrapper class
        List<Integer> danhSachNguyen = List.of(a, b);
        System.out.println("Danh s√°ch nguy√™n th·ªßy: " + danhSachNguyen);

        //  Lambda expression
        List<String> ten = List.of("Nam", "An", "Nguyen");
        ten.forEach(t -> System.out.println("Xin ch√†o, " + t)); // Duy·ªát b·∫±ng lambda

        //  Predicate interface
        Predicate<String> daiHon3 = s -> s.length() > 3; // bi·ªÉu th·ª©c ki·ªÉm tra chu·ªói d√†i h∆°n 3 k√Ω t·ª±
        System.out.println("Nguyen d√†i > 3? " + daiHon3.test("Nguyen"));
        System.out.println("An d√†i > 3? " + daiHon3.test("An"));

        // K·∫øt h·ª£p v·ªõi Stream API ƒë·ªÉ l·ªçc t√™n d√†i
        ten.stream().filter(daiHon3).forEach(s -> System.out.println("T√™n d√†i: " + s));
    }
}

// L·ªõp Generic Box<T>
class Box<T> {
    private T giaTri;

    public void setGiaTri(T giaTri) {
        this.giaTri = giaTri;
    }

    public T getGiaTri() {
        return giaTri;
    }
} //  D√πng ƒë∆∞·ª£c v·ªõi nhi·ªÅu ki·ªÉu kh√°c nhau nh·ªù Generics
